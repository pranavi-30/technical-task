name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Run tests
      run: |
        python -m pytest tests.py -v
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start Minikube
      uses: medyagh/setup-minikube@master
      with:
        kubernetes-version: v1.28.3
        minikube-version: 1.31.2
        driver: docker
    
    - name: Build and Load Docker image
      run: |
        # Use Minikube's Docker daemon directly
        eval $(minikube docker-env)
        
        # Build the image directly in Minikube's Docker environment
        docker build -t fastapi-app:latest .
        
        # Verify image is available
        docker images | grep fastapi-app
    
    - name: Deploy to Minikube
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s-deployment.yaml
        
        # Don't wait for rollout immediately, let's debug first
        echo "Waiting 30 seconds for pods to start..."
        sleep 30
        
        # Check pod status
        echo "=== Pod Status ==="
        kubectl get pods -o wide
        
        # Describe pods to see events
        echo "=== Pod Descriptions ==="
        kubectl describe pods
        
        # Check pod logs if any pods exist
        echo "=== Pod Logs ==="
        kubectl get pods -o name | while read pod; do
          echo "Logs for $pod:"
          kubectl logs $pod || echo "No logs available yet"
        done
        
        # Check events
        echo "=== Recent Events ==="
        kubectl get events --sort-by=.metadata.creationTimestamp
        
        # Now try to wait for deployment with a shorter timeout
        kubectl rollout status deployment/fastapi-app --timeout=120s || true
        
        # Final status check
        echo "=== Final Status ==="
        kubectl get all
    
    - name: Debug and Test deployment
      run: |
        # Get pod status
        POD_STATUS=$(kubectl get pods -l app=fastapi-app -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "No pods")
        echo "Pod status: $POD_STATUS"
        
        if [ "$POD_STATUS" != "Running" ]; then
          echo "Pods are not running. Checking for issues..."
          
          # Check if image exists in minikube
          eval $(minikube docker-env)
          docker images | grep fastapi-app
          
          # Try to run the container directly to test
          echo "Testing container directly..."
          docker run -d --name test-direct -p 8001:8000 fastapi-app:latest || {
            echo "Direct container run failed. Checking logs..."
            docker logs test-direct || true
          }
          
          # Clean up test container
          docker rm -f test-direct || true
        else
          # Pods are running, test the service
          echo "Pods are running. Testing service..."
          
          # Try port forwarding
          kubectl port-forward service/fastapi-service 8080:80 &
          PF_PID=$!
          sleep 5
          
          # Test
          curl -f http://localhost:8080/ || echo "Port forward test failed"
          curl -f http://localhost:8080/health || echo "Health check failed"
          
          # Kill port forward
          kill $PF_PID || true
        fi