name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Run tests
      run: |
        python -m pytest tests.py -v
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t fastapi-app:${{ github.sha }} .
        docker tag fastapi-app:${{ github.sha }} fastapi-app:latest
    
    - name: Save Docker image
      run: |
        docker save fastapi-app:latest > fastapi-app.tar
    
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: fastapi-app.tar

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load < fastapi-app.tar
    
    - name: Start Minikube
      uses: medyagh/setup-minikube@master
    
    - name: Deploy to Minikube
      run: |
        eval $(minikube docker-env)
        docker load < fastapi-app.tar
        kubectl apply -f k8s-deployment.yaml
        kubectl wait --for=condition=ready pod -l app=fastapi-app --timeout=300s
    
    - name: Test deployment
      run: |
        kubectl get pods
        kubectl get services
        # Get service URL and test endpoint
        SERVICE_URL=$(minikube service fastapi-service --url)
        curl -f $SERVICE_URL || exit 1