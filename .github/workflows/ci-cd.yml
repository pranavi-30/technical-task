name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Run tests
      run: |
        python -m pytest tests.py -v
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start Minikube
      uses: medyagh/setup-minikube@master
      with:
        kubernetes-version: v1.28.3
        minikube-version: 1.31.2
        driver: docker
    
    - name: Build and Load Docker image
      run: |
        # Use Minikube's Docker daemon directly
        eval $(minikube docker-env)
        
        # Build the image directly in Minikube's Docker environment
        docker build -t fastapi-app:latest .
        
        # Verify image is available
        docker images | grep fastapi-app
    
    - name: Deploy to Minikube
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s-deployment.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/fastapi-app --timeout=300s
        
        # Check deployment status
        kubectl get pods
        kubectl get services
    
    - name: Test deployment
      run: |
        # Wait for pods to be fully ready
        kubectl wait --for=condition=ready pod -l app=fastapi-app --timeout=300s
        
        # Option 1: Use port forwarding for testing
        kubectl port-forward service/fastapi-service 8080:80 &
        sleep 5
        
        # Test with port forwarding
        echo "Testing via port-forward..."
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
        
        # Kill port-forward
        pkill -f "port-forward" || true
        
        echo "Deployment tests completed!"